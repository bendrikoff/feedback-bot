name: Deploy Direct to Server

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main, master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: bot-build
        path: ./deploy
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Переходим в директорию проекта
          cd /opt/feedback-bot
          
          # Останавливаем текущий контейнер
          docker-compose down || true
          
          # Удаляем старый образ
          docker rmi feedback-bot:latest || true
          
          # Очищаем старые образы
          docker image prune -f
          
          # Показываем статус
          docker-compose ps
          
    - name: Build Docker image on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Переходим в директорию проекта
          cd /opt/feedback-bot
          
          # Собираем образ локально на сервере
          docker build -t feedback-bot:latest .
          
          # Запускаем контейнер
          docker-compose up -d
          
          # Показываем статус
          docker-compose ps
          
          # Показываем логи
          docker-compose logs --tail=20
