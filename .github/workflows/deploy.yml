name: CI/CD and Deploy

on:
  push:
    branches: [main, master]

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bot-build
        path: |
          dist/
          package*.json
          Dockerfile
          docker-compose.direct.yml
          env.example
          ecosystem.config.js
        retention-days: 1
        
  deploy:
    runs-on: ubuntu-latest
    needs: ci-cd
    if: success()
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: bot-build
        
    - name: Deploy artifacts to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "dist/ package*.json Dockerfile docker-compose.direct.yml env.example ecosystem.config.js"
        target: "/opt/feedback-bot/"
        
    - name: Build and start on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # Переходим в директорию проекта
          cd /opt/feedback-bot
          
          # Копируем необходимые файлы для Docker
          cp ../feedback-bot/docker-compose.direct.yml ./docker-compose.yml || echo "docker-compose.direct.yml не найден"
          
          # Создаем docker-compose.yml если файл не найден
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            feedback-bot:
              build: .
              container_name: feedback-bot
              restart: unless-stopped
              environment:
                - NODE_ENV=production
                - BOT_TOKEN=${BOT_TOKEN}
                - ADMIN_USER_ID=${ADMIN_USER_ID}
                - DATABASE_PATH=/app/data/database.sqlite
              volumes:
                - ./data:/app/data
                - ./logs:/app/logs
              networks:
                - bot-network
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "3"
          
          networks:
            bot-network:
              driver: bridge
          EOF
          fi
          
          # Останавливаем текущий контейнер
          docker-compose down || true
          
          # Собираем и запускаем контейнер
          docker-compose up --build -d
          
          # Очищаем старые образы
          docker image prune -f
          
          # Показываем статус
          docker-compose ps
          
          # Показываем логи
          docker-compose logs --tail=20
