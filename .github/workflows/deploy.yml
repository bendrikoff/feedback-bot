name: CI/CD and Deploy

on:
  push:
    branches: [main, master]

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bot-build
        path: |
          dist/
          package*.json
          Dockerfile
          env.example
        retention-days: 1
        
  deploy:
    runs-on: ubuntu-latest
    needs: ci-cd
    if: success()
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: bot-build
        path: ./artifacts
        
    - name: Extract artifacts
      run: |
        echo "📦 Проверяем содержимое артефактов..."
        ls -la
        echo "📦 Содержимое папки artifacts:"
        ls -la artifacts/
        echo "📦 Рекурсивно смотрим структуру artifacts:"
        find artifacts/ -type f -o -type d || echo "Файлы не найдены"
        
    - name: Deploy artifacts to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "artifacts/"
        target: "/opt/feedback-bot/"
        
    - name: Build and start on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # Переходим в директорию проекта
          cd /opt/feedback-bot
          
          echo "📋 Содержимое директории /opt/feedback-bot:"
          ls -la
          
          # Создаем необходимые директории
          mkdir -p data logs
          
          # Копируем файлы из артефактов
          echo "📋 Содержимое папки artifacts:"
          ls -la artifacts/
          
          # Копируем файлы артефактов в корень (кроме .env если он уже существует)
          if [ -f .env ]; then
            echo "✅ Файл .env уже существует, не перезаписываем"
            cp -r artifacts/* . && echo "Файлы скопированы из artifacts/" || echo "Ошибка копирования файлов"
          else
            cp -r artifacts/* .
            cp env.example .env
            echo "📝 Создан файл .env из примера. Отредактируйте его!"
          fi
          
          # Перезаписываем docker-compose.yml для локальной сборки
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            feedback-bot:
              build: .
              container_name: feedback-bot
              restart: unless-stopped
              environment:
                - NODE_ENV=production
                - BOT_TOKEN=${BOT_TOKEN}
                - ADMIN_USER_ID=${ADMIN_USER_ID}
                - DATABASE_PATH=/app/data/database.sqlite
              volumes:
                - ./data:/app/data
                - ./logs:/app/logs
              networks:
                - bot-network
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "3"
          
          networks:
            bot-network:
              driver: bridge
          EOF
          
          echo "📋 Проверяем созданные файлы:"
          ls -la Dockerfile docker-compose.yml || echo "Файлы не созданы"
          echo "📋 Проверяем файлы собранного проекта:"
          ls -la dist/ || echo "Папка dist не найдена"
          ls -la package*.json || echo "package.json не найден"
          
          # Исправляем права доступа к папкам
          sudo chown -R 1001:1001 ./data ./logs || echo "Не удалось изменить права через sudo"
          chmod -R 755 ./data ./logs
          
          # Проверяем права
          ls -la data/ logs/
          
          # Если папка data пустая, создаем файл с правильными правами
          touch data/test.file && rm data/test.file || echo "Не удалось создать тестовый файл"
          
          # Останавливаем текущий контейнер
          docker-compose down || true
          
          # Собираем и запускаем контейнер
          docker-compose up --build -d
          
          # Очищаем старые образы
          docker image prune -f
          
          # Показываем статус
          docker-compose ps
          
          # Показываем логи
          docker-compose logs --tail=20
