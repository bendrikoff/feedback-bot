import { Telegraf, Markup } from 'telegraf';
import { Database } from './database';
import { BotConfig, User } from './types';

export class FeedbackBot {
  private bot: Telegraf;
  private database: Database;
  private config: BotConfig;

  constructor(config: BotConfig) {
    this.config = config;
    this.bot = new Telegraf(config.token);
    this.database = new Database({ path: config.databasePath });
    this.setupCommands();
    this.setupMiddleware();
  }

  private setupMiddleware(): void {
    // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
    this.bot.use(async (ctx, next) => {
      const userId = ctx.from?.id;
      if (!userId) {
        return next();
      }

      const user = this.database.getUser(userId);
      if (user && user.is_banned) {
        await ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
        return;
      }

      return next();
    });

    // Middleware –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.bot.use(async (ctx, next) => {
      const userId = ctx.from?.id;
      if (!userId) {
        return next();
      }

      const existingUser = this.database.getUser(userId);
      if (!existingUser) {
        const newUser: Omit<User, 'created_at'> = {
          id: userId,
          username: ctx.from.username || null,
          first_name: ctx.from.first_name || null,
          last_name: ctx.from.last_name || null,
          is_banned: false
        };
        this.database.createUser(newUser);
      }

      return next();
    });
  }

  private setupCommands(): void {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start((ctx) => {
      ctx.reply(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!\n\n' +
        'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n' +
        'üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n' +
        '/feedback - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å'
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help((ctx) => {
      ctx.reply(
        'üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n' +
        'üìù –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\n' +
        'üîß –ö–æ–º–∞–Ω–¥—ã:\n' +
        '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
        '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n' +
        '/feedback - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n' +
        '‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –±–æ—Ç—É!'
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /feedback
    this.bot.command('feedback', (ctx) => {
      ctx.reply(
        'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:\n' +
        '‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n' +
        '‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n' +
        '‚Ä¢ –û—Ç–∑—ã–≤—ã –æ —Ä–∞–±–æ—Ç–µ\n' +
        '‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n' +
        '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.'
      );
    });

    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    this.bot.command('admin', async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      ctx.reply(
        'üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n' +
        '/ban <user_id> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
        '/unban <user_id> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
        '/feedback_list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏\n' +
        '/process <feedback_id> - –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ\n' +
        '/banned_users - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
        '/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞'
      );
    });

    this.bot.command('ban', async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      const args = ctx.message.text.split(' ');
      if (args.length < 2) {
        ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>');
        return;
      }

      const userId = parseInt(args[1]);
      if (isNaN(userId)) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
      }

      try {
        this.database.banUser(userId);
        ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        console.error('Ban error:', error);
      }
    });

    this.bot.command('unban', async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      const args = ctx.message.text.split(' ');
      if (args.length < 2) {
        ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>');
        return;
      }

      const userId = parseInt(args[1]);
      if (isNaN(userId)) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
      }

      try {
        this.database.unbanUser(userId);
        ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        console.error('Unban error:', error);
      }
    });

    this.bot.command('feedback_list', async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      try {
        const feedback = this.database.getFeedback(10);
        if (feedback.length === 0) {
          ctx.reply('üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.');
          return;
        }

        let message = 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n\n';
        for (const item of feedback) {
          const user = this.database.getUser(item.user_id);
          const userName = user ? 
            `${user.first_name || ''} ${user.last_name || ''}`.trim() || 
            user.username || 
            `ID: ${user.id}` : 
            `ID: ${item.user_id}`;
          
          message += `üÜî ID: ${item.id}\n`;
          message += `üë§ –û—Ç: ${userName}\n`;
          message += `üìÖ –î–∞—Ç–∞: ${new Date(item.created_at).toLocaleString('ru-RU')}\n`;
          message += `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${item.message}\n`;
          message += `${item.is_processed ? '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ' : '‚è≥ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}\n\n`;
        }

        ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [
              [
                Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', 'refresh_feedback_list'),
                Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats')
              ],
              [
                Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', 'show_banned_users')
              ]
            ]
          }
        });
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.');
        console.error('Feedback list error:', error);
      }
    });

    this.bot.command('banned_users', async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      try {
        const bannedUsers = this.database.getBannedUsers();
        if (bannedUsers.length === 0) {
          ctx.reply('‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
          return;
        }

        let message = 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n';
        for (const user of bannedUsers) {
          const userName = `${user.first_name || ''} ${user.last_name || ''}`.trim() || 
                          user.username || 
                          `ID: ${user.id}`;
          message += `üë§ ${userName} (ID: ${user.id})\n`;
          message += `üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}\n\n`;
        }

        ctx.reply(message);
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        console.error('Banned users error:', error);
      }
    });

    this.bot.command('stats', async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      try {
        const feedback = this.database.getFeedback(1000); // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const bannedUsers = this.database.getBannedUsers();
        
        const totalFeedback = feedback.length;
        const processedFeedback = feedback.filter(f => f.is_processed).length;
        const unprocessedFeedback = totalFeedback - processedFeedback;

        ctx.reply(
          'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n' +
          `üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${totalFeedback}\n` +
          `‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedFeedback}\n` +
          `‚è≥ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${unprocessedFeedback}\n` +
          `üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${bannedUsers.length}`
        );
      } catch (error) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        console.error('Stats error:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.bot.on('text', async (ctx) => {
      const message = ctx.message.text;
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (message.startsWith('/')) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (ctx.from?.id === this.config.adminUserId && ctx.message.reply_to_message) {
        const replyMessage = ctx.message.reply_to_message;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if ('text' in replyMessage && replyMessage.text && replyMessage.text.includes('üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:')) {
          try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const originalText = replyMessage.text;
            const userIdMatch = originalText.match(/üë§ –û—Ç: .+ \(ID: (\d+)\)/);
            
            console.log('Debug: Original text:', originalText);
            console.log('Debug: User ID match:', userIdMatch);
            
            if (userIdMatch) {
              const userId = parseInt(userIdMatch[1]);
              console.log('Debug: User ID:', userId);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              await this.bot.telegram.sendMessage(
                userId,
                `üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n${message}`
              );
              
              // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
              const feedback = this.database.getFeedback(100);
              const userFeedback = feedback.find(f => f.user_id === userId && !f.is_processed);
              
              if (userFeedback) {
                this.database.markFeedbackAsProcessed(userFeedback.id);
                console.log('Debug: Marked feedback as processed:', userFeedback.id);
              }
              
              // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
              ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!');
              return;
            }
            
            ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.');
          } catch (error) {
            ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
            console.error('Reply error:', error);
          }
          return;
        }
      }

      // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      try {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const existingUser = this.database.getUser(ctx.from!.id);
        if (!existingUser) {
          const newUser: Omit<User, 'created_at'> = {
            id: ctx.from!.id,
            username: ctx.from.username || null,
            first_name: ctx.from.first_name || null,
            last_name: ctx.from.last_name || null,
            is_banned: false
          };
          this.database.createUser(newUser);
          console.log('Debug: Created new user:', newUser);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const userName = `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim() || 
                        ctx.from.username || 
                        `ID: ${ctx.from.id}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        this.database.addFeedback(ctx.from!.id, message);
        
        // –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const feedback = this.database.getFeedback(1);
        const feedbackId = feedback[0]?.id || 1;
        
        await this.bot.telegram.sendMessage(
          this.config.adminUserId,
          `üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n\n` +
          `üÜî ID: ${feedbackId}\n` +
          `üë§ –û—Ç: ${userName} (ID: ${ctx.from.id})\n` +
          `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}\n` +
          `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n\n` +
          `üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  Markup.button.callback('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', `process_${feedbackId}`)
                ],
                [
                  Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `ban_${ctx.from.id}`)
                ]
              ]
            }
          }
        );

        ctx.reply(
          '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n\n' +
          '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üôè'
        );
      } catch (error) {
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        console.error('Feedback error:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    this.bot.action(/^process_(\d+)$/, async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      const feedbackId = parseInt(ctx.match[1]);
      
      try {
        this.database.markFeedbackAsProcessed(feedbackId);
        ctx.answerCbQuery('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        ctx.editMessageReplyMarkup({
          inline_keyboard: [
            [
              Markup.button.callback('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', `processed_${feedbackId}`, true)
            ],
            [
              Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `ban_${feedbackId}`)
            ]
          ]
        });
      } catch (error) {
        ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ');
        console.error('Process callback error:', error);
      }
    });


    this.bot.action(/^ban_(\d+)$/, async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      const feedbackId = parseInt(ctx.match[1]);
      
      try {
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å user_id
        const feedback = this.database.getFeedback(1000);
        const matchingFeedback = feedback.find(f => f.id === feedbackId);
        
        if (matchingFeedback) {
          this.database.banUser(matchingFeedback.user_id);
          ctx.answerCbQuery('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
          ctx.editMessageReplyMarkup({
            inline_keyboard: [
              [
                Markup.button.callback('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', `process_${feedbackId}`)
              ],
              [
                Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', `banned_${feedbackId}`, true)
              ]
            ]
          });
        } else {
          ctx.answerCbQuery('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
      } catch (error) {
        ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
        console.error('Ban callback error:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (disabled)
    this.bot.action(/^(processed|banned)_/, (ctx) => {
      ctx.answerCbQuery('–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.bot.action('refresh_feedback_list', async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      try {
        const feedback = this.database.getFeedback(10);
        if (feedback.length === 0) {
          ctx.editMessageText('üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.');
          return;
        }

        let message = 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n\n';
        for (const item of feedback) {
          const user = this.database.getUser(item.user_id);
          const userName = user ? 
            `${user.first_name || ''} ${user.last_name || ''}`.trim() || 
            user.username || 
            `ID: ${user.id}` : 
            `ID: ${item.user_id}`;
          
          message += `üÜî ID: ${item.id}\n`;
          message += `üë§ –û—Ç: ${userName}\n`;
          message += `üìÖ –î–∞—Ç–∞: ${new Date(item.created_at).toLocaleString('ru-RU')}\n`;
          message += `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${item.message}\n`;
          message += `${item.is_processed ? '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ' : '‚è≥ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}\n\n`;
        }

        ctx.editMessageText(message, {
          reply_markup: {
            inline_keyboard: [
              [
                Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', 'refresh_feedback_list'),
                Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats')
              ],
              [
                Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', 'show_banned_users')
              ]
            ]
          }
        });
        ctx.answerCbQuery('‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } catch (error) {
        ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
        console.error('Refresh feedback list error:', error);
      }
    });

    this.bot.action('show_stats', async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      try {
        const feedback = this.database.getFeedback(1000);
        const bannedUsers = this.database.getBannedUsers();
        
        const totalFeedback = feedback.length;
        const processedFeedback = feedback.filter(f => f.is_processed).length;
        const unprocessedFeedback = totalFeedback - processedFeedback;

        const statsMessage = 
          'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n' +
          `üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${totalFeedback}\n` +
          `‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedFeedback}\n` +
          `‚è≥ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${unprocessedFeedback}\n` +
          `üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${bannedUsers.length}`;

        ctx.editMessageText(statsMessage, {
          reply_markup: {
            inline_keyboard: [
              [
                Markup.button.callback('üìù –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π', 'refresh_feedback_list'),
                Markup.button.callback('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', 'show_banned_users')
              ]
            ]
          }
        });
        ctx.answerCbQuery('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
      } catch (error) {
        ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        console.error('Show stats error:', error);
      }
    });

    this.bot.action('show_banned_users', async (ctx) => {
      if (ctx.from?.id !== this.config.adminUserId) {
        ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      try {
        const bannedUsers = this.database.getBannedUsers();
        if (bannedUsers.length === 0) {
          ctx.editMessageText('‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
          return;
        }

        let message = 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n';
        for (const user of bannedUsers) {
          const userName = `${user.first_name || ''} ${user.last_name || ''}`.trim() || 
                          user.username || 
                          `ID: ${user.id}`;
          message += `üë§ ${userName} (ID: ${user.id})\n`;
          message += `üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}\n\n`;
        }

        ctx.editMessageText(message, {
          reply_markup: {
            inline_keyboard: [
              [
                Markup.button.callback('üìù –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π', 'refresh_feedback_list'),
                Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'show_stats')
              ]
            ]
          }
        });
        ctx.answerCbQuery('üö´ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω');
      } catch (error) {
        ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞');
        console.error('Show banned users error:', error);
      }
    });
  }

  public start(): void {
    this.bot.launch();
    console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    
    // Graceful stop
    process.once('SIGINT', () => this.bot.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
  }

  public stop(): void {
    this.bot.stop();
    this.database.close();
    console.log('üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}
